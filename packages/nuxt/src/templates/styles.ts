import type { NuxtTemplate } from 'nuxt/schema'

export function createWemeStyles(): NuxtTemplate {
  const colors = ['accent', 'neutral', 'info', 'success', 'warning', 'error']
  const variants = ['solid', 'soft', 'surface', 'outline', 'ghost', 'link', 'inverse']
  const states = ['normal', 'hover', 'active']

  return {
    filename: 'weme/weme.style.ts',
    getContents() {
      return `// GENERATED BY @weme-ui/nuxt
type ColorName = ${colors.map(c => `'${c}'`).join(' | ')}
type StateName = ${states.map(s => `'${s}'`).join(' | ')}
type VariantName = ${variants.map(v => `'${v}'`).join(' | ')}
type VariantNameMap = Record<string, VariantName>

interface VariantStateClass {
  variant: VariantName
  state: StateName
  class: string
}

type ColorVariantClasses = Record<ColorName, VariantStateClass[]>

const colorVariants: ColorVariantClasses = {
${colors.map(
  color => (`  ${color}: [
${variants.map((variant) => {
      function skip(value: string, key: string): string {
        return key === value ? '' : `-${key}`
      }

      return states.map((state) => {
        return `    { variant: '${variant}', state: '${state}', class: 'ui-${color}${skip('solid', variant)}${skip('normal', state)}' },`
      }).join('\n')
    }).join('\n')}
  ]`),
).join(',\n')}
}

/**
 * Create color variant classes
 */
export function createColorVariantClasses({
  color,
  variant,
  states,
  slot = '',
}: {
  color: ColorName
  variant: VariantName
  states: StateName | StateName[]
  slot?: string
}) {
  const colorVariant = colorVariants[color].filter(v => v.variant === variant)

  const classes = colorVariant
    .filter(v => (Array.isArray(states) ? states : [states]).includes(v.state))
    .map(v => v.class)
    .filter(Boolean)

  return slot === ''
    ? classes
    : { [slot]: classes }
}

/**
 * Create color variants for all color classes
 *
 * @example
 * \`\`\`
 * import { createColorVariants } from '#weme/weme.style'
 * import { createVariants } from '../../utils'
 *
 * createVariants({
 *   variants: {
 *     color: createColorVariants({
 *       variant: 'solid',
 *       states: 'normal', // Multiple states can be specified as ['normal', 'hover', 'active']
 *       slot: 'base', // Optional
 *     }),
 *   }
 * })
 *
 * **Create placeholders for all colors**
 *
 * createVariants({
 *   variants: {
 *     color: createColorVariants({
 *       variant: 'solid',
 *       defaults: '', // Required
 *       states: 'normal', // Required
 *       slot: 'base', // Optional
 *     }),
 *   }
 * })
 *
 * Placeholders:
 *
 * { accent: '', neutral: '', info: '', success: '', warning: '', error: '' }
 * \`\`\`
 */
export function createColorVariants({
  variant,
  states,
  defaults,
  slot = '',
}: {
  variant: VariantName
  states: StateName | StateName[]
  defaults?: string
  slot?: string
}) {
  return Object.keys(colorVariants)
    .reduce((acc, color) => ({
      ...acc,

      [color]: defaults !== undefined
        ? slot === '' ? defaults : { [slot]: defaults }
        : createColorVariantClasses({
            color: color as ColorName,
            variant,
            states,
            slot,
          }),
    }), {} as Record<ColorName, any>)
}

/**
 * Create color compound variants for all color classes
 */
export function createColorCompoundVariants({
  variants,
  states,
  slot = '',
}: {
  variants: VariantName | VariantName[] | VariantNameMap
  states: StateName | StateName[]
  slot?: string
}) {
  const compounds: any[] = []

  Object.entries(colorVariants).forEach(([color]) => {
    if (typeof variants === 'object' && !Array.isArray(variants)) {
      Object.entries(variants).forEach(([alias, variant]) => {
        compounds.push({
          color,
          variant: alias,
          class: createColorVariantClasses({ color: color as ColorName, variant, states, slot }),
        })
      })
    } else {
      variants = typeof variants === 'string' ? [variants] : variants

      variants.forEach(variant => {
        compounds.push({
          color,
          variant,
          class: createColorVariantClasses({ color: color as ColorName, variant, states, slot }),
        })
      })
    }
  })

  return compounds
}
`
    },
    write: true,
  }
}
